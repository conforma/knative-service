name: Pull Request Validation

on:
  pull_request:
    branches: [ main ]

env:
  GO_VERSION: '1.24'

jobs:
  validate-pr:
    name: Validate Pull Request
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
      
    - name: Set up Go
      uses: actions/setup-go@0a12ed9d6a96ab950c8f026ed9f722fe0da7ef32 # v5.0.2
      with:
        go-version: ${{ env.GO_VERSION }}
        
    - name: Cache Go modules
      uses: actions/cache@0400d5f644dc74513175e3cd8d07132dd4860809 # v4.0.2
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        
    - name: Download dependencies
      run: go mod download
      
    - name: Format check
      run: |
        if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
          echo "❌ Code is not properly formatted. Run 'make fmt'"
          gofmt -s -l .
          exit 1
        fi
        echo "✅ Code is properly formatted"
        
    - name: Run tests with coverage
      run: |
        go test -v -race -coverprofile=coverage.out ./...
        COVERAGE=$(go tool cover -func=coverage.out | grep total | awk '{print $3}' | sed 's/%//')
        echo "Test coverage: $COVERAGE%"
        
    - name: Lint code
      uses: golangci/golangci-lint-action@aaa42aa0628b4ae2578232a66b541047968fac86 # v6.1.0
      with:
        version: latest
        args: --timeout=5m --config=.golangci.yml
        
    - name: Validate Kubernetes manifests
      run: |
        # Install kustomize
        curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh" | bash
        sudo mv kustomize /usr/local/bin/
        
        # Validate all configurations build successfully
        echo "Validating base configuration..."
        kustomize build config/base/ > /dev/null
        
        echo "Validating dev configuration..."
        kustomize build config/dev/ > /dev/null
                
        echo "✅ All Kubernetes manifests validate successfully"
        
    - name: Test container build
      run: |
        # Install ko for testing
        go install github.com/google/ko@latest
        
        # Test that the container builds (without pushing)
        KO_DOCKER_REPO=ko.local ko build --local ./cmd/launch-taskrun
        
        echo "✅ Container builds successfully"
        
    - name: Check for security issues
      run: |
        # Install gosec
        go install github.com/securego/gosec/v2/cmd/gosec@c9453023c4e81ebdb6dde29e22d9cd5e2285fb16 #v2.22.8
        # Run security scan
        gosec ./...

    - name: PR Summary Comment
      uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
      if: github.event_name == 'pull_request'
      with:
        script: |
          const body = `## 🧪 PR Validation Results
          
          ✅ **Tests**: All tests passing
          ✅ **Coverage**: Test coverage reported
          ✅ **Linting**: Code quality checks passed
          ✅ **Kubernetes**: All manifests validate
          ✅ **Container**: Build successful
          ✅ **Security**: No security issues detected
          ✅ **VSA**: Attestation support validated
          
          **Ready for merge!** 🚀`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: body
          });
