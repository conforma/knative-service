# Copyright The Conforma Contributors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# SPDX-License-Identifier: Apache-2.0

name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
    tags:
      - 'v*'  # Trigger releases on version tags
  pull_request_target:
    branches: [ main ]
    types: [opened, synchronize, reopened]

# Prevent multiple workflows from running simultaneously
concurrency:
  group: ${{ github.workflow }}-${{ github.event_name }}-${{ github.ref }}
  cancel-in-progress: true

env:
  GO_VERSION: '1.24.4'
  QUAY_REPOSITORY: 'quay.io/conforma/knative-service'
  GOSEC_VERSION: 'c9453023c4e81ebdb6dde29e22d9cd5e2285fb16' # v2.22.8
  KO_VERSION: 'v0.18.0'  # Pin ko version for reproducibility

permissions:
  contents: read  # Default read access

jobs:
  test-and-validate:
    name: Test and Validate
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request_target'
    timeout-minutes: 30  # Prevent runaway jobs
    permissions:
      contents: read
      actions: write
    steps:
    - name: Checkout code
      uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
      with:
        ref: ${{ github.event.pull_request.head.sha }}

    - name: Set up Go
      uses: actions/setup-go@44694675825211faa026b3c33043df3e48a5fa00 # v6.0.0
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@0400d5f644dc74513175e3cd8d07132dd4860809 # v4.2.4
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('go.sum', 'tools/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: go mod download

    - name: Download tools dependencies
      run: go mod download -modfile tools/go.mod

    - name: Format check
      run: |
        if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
          echo "❌ Code is not properly formatted. Run 'make fmt'"
          gofmt -s -l .
          exit 1
        fi
        echo "✅ Code is properly formatted"

    - name: License header check
      run: |
        echo "🔍 Checking license headers..."
        go run -modfile tools/go.mod github.com/google/addlicense -check -ignore '.github/ISSUE_TEMPLATE/**' -ignore '.github/PULL_REQUEST_TEMPLATE/**' -ignore '.github/dependabot.yml' -ignore 'vendor/**' -ignore 'node_modules/**' -ignore '*.md' -ignore '*.json' -ignore 'go.mod' -ignore 'go.sum' -ignore 'LICENSE' -ignore 'ko.yaml' -ignore '.ko.yaml' -ignore '.golangci.yml' -c 'The Conforma Contributors' -s -y 2025 .

    - name: Run tests with coverage
      run: |
        go test -v -race -coverprofile=coverage.out ./...
        COVERAGE=$(go tool cover -func=coverage.out | grep total | awk '{print $3}' | sed 's/%//')
        echo "Test coverage: $COVERAGE%"
        go tool cover -html=coverage.out -o coverage.html

    - name: Upload coverage reports
      uses: codecov/codecov-action@5a1091511ad55cbe89839c7260b706298ca349f7 # v5.5.1
      if: github.event_name == 'push' || github.event_name == 'pull_request'
      with:
        file: ./coverage.out
        flags: unittests
        name: codecov-umbrella

    - name: Run linter
      uses: golangci/golangci-lint-action@4afd733a84b1f43292c63897423277bb7f4313a9 # v8.0.0
      with:
        version: latest
        args: --timeout=5m --config=.golangci.yml

    - name: Validate Kubernetes manifests
      run: |
        # Install kustomize
        curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh" | bash
        sudo mv kustomize /usr/local/bin/

        # Validate base configuration
        echo "Validating base configuration..."
        kustomize build config/base/ > /tmp/base-output.yaml

        # Validate dev configuration
        echo "Validating dev configuration..."
        kustomize build config/dev/ > /tmp/dev-output.yaml

        echo "✅ All Kubernetes manifests validate successfully"

    - name: Test container build
      run: |
        set -euo pipefail
        echo "📦 Installing ko..."
        go install github.com/google/ko@${{ env.KO_VERSION }}

        echo "🏗️  Testing container build..."
        KO_DOCKER_REPO=ko.local ko build --local ./cmd/launch-taskrun

        echo "✅ Container builds successfully"

    - name: Security scan with Gosec
      run: |
        set -euo pipefail
        echo "🔒 Installing gosec..."
        go install github.com/securego/gosec/v2/cmd/gosec@${{ env.GOSEC_VERSION }}
        echo "🔍 Running security scan..."
        $(go env GOPATH)/bin/gosec ./...

  pr-comment:
    name: PR Summary Comment
    runs-on: ubuntu-latest
    needs: test-and-validate
    if: always() && github.event_name == 'pull_request_target'
    timeout-minutes: 10  # Just commenting, should be fast
    permissions:
      contents: read         # Read repository content
      pull-requests: write   # Comment on PRs
      issues: write         # Comment on issues (PRs are issues)
      actions: read         # Check workflow status

    steps:
    - name: Add PR Summary Comment
      if: needs.test-and-validate.result == 'success'
      uses: peter-evans/create-or-update-comment@c6c9a1a66007646a28c153e2a8580a5bad27bcfa # v4.0.0
      with:
        issue-number: ${{ github.event.pull_request.number }}
        body: |
          ## 🧪 PR Validation Results

          ✅ **Tests**: All tests passing
          ✅ **Coverage**: Test coverage reported
          ✅ **Linting**: Code quality checks passed
          ✅ **Kubernetes**: All manifests validate
          ✅ **Container**: Build successful
          ✅ **Security**: No security issues detected

          **Ready for merge!** 🚀
        reactions: '+1'

    - name: Add failure comment
      if: needs.test-and-validate.result == 'failure'
      uses: peter-evans/create-or-update-comment@c6c9a1a66007646a28c153e2a8580a5bad27bcfa # v4.0.0
      with:
        issue-number: ${{ github.event.pull_request.number }}
        body: |
          ## ❌ PR Validation Failed

          Some validation checks failed. Please check the [workflow run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}) for details.

          **Please fix the issues and push new changes.** 🔧
        reactions: '-1'

    - name: Add timeout/error comment
      if: needs.test-and-validate.result == 'cancelled' || needs.test-and-validate.result == 'skipped'
      uses: peter-evans/create-or-update-comment@c6c9a1a66007646a28c153e2a8580a5bad27bcfa # v4.0.0
      with:
        issue-number: ${{ github.event.pull_request.number }}
        body: |
          ## ⏰ PR Validation Timeout/Error

          The validation check was cancelled or skipped.
          Please check the [workflow runs](${{ github.server_url }}/${{ github.repository }}/actions) and try again.

          **This may be a temporary issue.** 🔄
        reactions: 'confused'

  build-and-push:
    name: Build and Push Container Image
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    timeout-minutes: 20  # Container builds should be fast
    permissions:
      contents: read   # Read code
      packages: write  # Push to registry

    steps:
    - name: Checkout code
      uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

    - name: Set up Go
      uses: actions/setup-go@44694675825211faa026b3c33043df3e48a5fa00 # v6.0.0
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Install ko
      uses: ko-build/setup-ko@ace48d793556083a76f1e3e6068850c1f4a369aa # v0.6

    - name: Log in to Quay.io
      uses: docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567 # v3.3.0
      with:
        registry: quay.io
        username: ${{ secrets.QUAY_USERNAME }}
        password: ${{ secrets.QUAY_PASSWORD }}

    - name: Build and push image
      env:
        KO_DOCKER_REPO: ${{ env.QUAY_REPOSITORY }}
      run: |
        set -euo pipefail
        echo "🏗️  Building and pushing container image..."

        # Build and push with commit SHA tag
        export IMAGE_TAG="main-$(git rev-parse --short HEAD)"
        export COMMIT_SHA="$(git rev-parse HEAD)"

        ko build --bare \
          --tags="$IMAGE_TAG,latest" \
          --image-label="org.opencontainers.image.revision=$COMMIT_SHA" \
          --image-label="org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}" \
          ./cmd/launch-taskrun

        echo "✅ Image pushed to ${{ env.QUAY_REPOSITORY }}:$IMAGE_TAG"
        echo "✅ Image pushed to ${{ env.QUAY_REPOSITORY }}:latest"
        echo "📝 Commit SHA: $COMMIT_SHA"

    - name: Generate SBOM
      run: |
        echo "✅ SBOM automatically generated by ko"

    - name: Update deployment tracking
      run: |
        echo "📝 Image built from commit: $(git rev-parse HEAD)"
        echo "📝 Available at: ${{ env.QUAY_REPOSITORY }}:main-$(git rev-parse --short HEAD)"

  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: build-and-push
    if: startsWith(github.ref, 'refs/tags/v')
    timeout-minutes: 25  # Release builds + GitHub release creation
    permissions:
      contents: write  # Create releases and read code
      packages: write  # Push release images

    steps:
    - name: Checkout code
      uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
      with:
        fetch-depth: 0  # Fetch full history for changelog

    - name: Set up Go
      uses: actions/setup-go@44694675825211faa026b3c33043df3e48a5fa00 # v6.0.0
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Install ko
      uses: ko-build/setup-ko@ace48d793556083a76f1e3e6068850c1f4a369aa # v0.6

    - name: Log in to Quay.io
      uses: docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567 # v3.3.0
      with:
        registry: quay.io
        username: ${{ secrets.QUAY_USERNAME }}
        password: ${{ secrets.QUAY_PASSWORD }}

    - name: Extract version from tag
      id: version
      run: |
        VERSION=${GITHUB_REF#refs/tags/}
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "short_sha=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

    - name: Build and push release image
      env:
        KO_DOCKER_REPO: ${{ env.QUAY_REPOSITORY }}
        VERSION: ${{ steps.version.outputs.version }}
        SHORT_SHA: ${{ steps.version.outputs.short_sha }}
      run: |
        set -euo pipefail
        echo "🏗️  Building and pushing release image..."

        export COMMIT_SHA="$(git rev-parse HEAD)"
        export BUILD_DATE="$(date -u +'%Y-%m-%dT%H:%M:%SZ')"

        # Build and push with version tag and OCI labels
        ko build --bare \
          --tags="$VERSION,$VERSION-$SHORT_SHA,latest" \
          --image-label="org.opencontainers.image.version=$VERSION" \
          --image-label="org.opencontainers.image.revision=$COMMIT_SHA" \
          --image-label="org.opencontainers.image.created=$BUILD_DATE" \
          --image-label="org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}" \
          --image-label="org.opencontainers.image.url=${{ github.server_url }}/${{ github.repository }}" \
          --image-label="org.opencontainers.image.title=Conforma Knative Service" \
          --image-label="org.opencontainers.image.description=Kubernetes-native event-driven service for enterprise contract verification" \
          ./cmd/launch-taskrun

        echo "✅ Release image pushed to $KO_DOCKER_REPO:$VERSION"
        echo "✅ Release image pushed to $KO_DOCKER_REPO:$VERSION-$SHORT_SHA"
        echo "✅ Latest tag updated to $KO_DOCKER_REPO:latest"
        echo "📝 Build metadata: $VERSION ($COMMIT_SHA) built at $BUILD_DATE"

    - name: Generate changelog
      id: changelog
      run: |
        # Get previous tag for changelog
        PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")

        if [ -n "$PREVIOUS_TAG" ]; then
          echo "## Changes since $PREVIOUS_TAG" > CHANGELOG.md
          git log --oneline $PREVIOUS_TAG..HEAD >> CHANGELOG.md
        else
          echo "## Initial Release" > CHANGELOG.md
          echo "First release of Conforma Knative Service" >> CHANGELOG.md
        fi

        echo "changelog<<EOF" >> $GITHUB_OUTPUT
        cat CHANGELOG.md >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Create GitHub Release
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Create release with GitHub CLI
        gh release create ${{ steps.version.outputs.version }} \
          --title "Release ${{ steps.version.outputs.version }}" \
          --notes-file - << 'EOF'
        # Conforma Knative Service ${{ steps.version.outputs.version }}

        ## 🚀 Container Images
        - **Latest**: \`${{ env.QUAY_REPOSITORY }}:${{ steps.version.outputs.version }}\`
        - **Commit-specific**: \`${{ env.QUAY_REPOSITORY }}:${{ steps.version.outputs.version }}-${{ steps.version.outputs.short_sha }}\`

        ## 📋 Deployment

        ### Using Release Image
        Update your kustomization to use the release image:
        \`\`\`yaml
        images:
        - name: ko://github.com/conforma/knative-service/cmd/launch-taskrun
          newName: ${{ env.QUAY_REPOSITORY }}
          newTag: ${{ steps.version.outputs.version }}
        \`\`\`

        ## 🔐 Security Features
        - SBOM generation included
        - Supply chain security ready

        ## 📚 Documentation
        - [README](README.md)

        ${{ steps.changelog.outputs.changelog }}
        EOF
